Download unit_modules from - https://drive.google.com/drive/folders/1PWESNhZIDa1YL6aipVyrl_Pwo4LYo1Zu?usp=sharing

#
# 	Training the SAFE-MEME:
#

* 	File: main_trainUnitModels.py is used sequentially to train the model.
* 	Stage 1: Kindly use the following command to train the query generation module: trainAllQueryGen

CUDA_VISIBLE_DEVICES=0 python3 main_trainUnitModels.py    --full_FT YES     --img_type vit     --execution_mode  trainAllQueryGen     --user_msg rationale     --epoch 50 --lr 5e-5 --output_len 128     --use_caption --use_generate --prompt_format QCM-E     --output_dir experiments     --final_eval

* 	Stage 1: Kindly use the following command to train the response generation module: trainAllQueryGen_1Q1A

CUDA_VISIBLE_DEVICES=0 python3 main_trainUnitModels.py    --full_FT YES     --img_type vit     --execution_mode  trainAllQueryGen_1Q1A     --user_msg rationale     --epoch 50 --lr 5e-5 --output_len 85     --use_caption --use_generate --prompt_format QCM-E     --output_dir experiments     --final_eval

#
# Evaluating SAFE-MEME:
#

* 	For evaluation of the MGS datset, use pipe_testUnitModelsOutputGen, and utils_dataTestUnitModels.py
* 	Kindly use VIT_T5Base_FullFT_trainAllQueryGen (checkpoint-9350) and VIT_T5Base_FullFT_trainAllQueryGen_1Q1A (checkpoint-43450)
* 	Stage 1: Kindly use the following command to generate the set of queries.

CUDA_VISIBLE_DEVICES=0 python3 pipe_testUnitModelsOutputGen.py         --execution_mode  testAllQueryGen         --img_type vit         --output_len 128         --full_FT YES         --user_msg rationale         --epoch 50         --lr 5e-5         --use_caption         --use_generate         --prompt_format QCM-E         --output_dir experiments         --final_eval

* 	Stage 2: Kindly use the following command to generate the set of queries.

CUDA_VISIBLE_DEVICES=0 python3 pipe_testUnitModelsOutputGen.py         --execution_mode  testAllQueryGen_1Q1A         --img_type vit         --output_len 85         --full_FT YES         --user_msg rationale         --epoch 50         --lr 5e-5         --use_caption         --use_generate         --prompt_format QCM-E         --output_dir experiments         --final_eval

* 	Now, run showFinalResult-A.py to generate (print) the formatted outputs. 

###

* 	For evaluation of the DatasetB-Confounder datset, use utils_dataTestUnitModels_confounder.py
* 	Stage 1: Kindly use the following command to generate the set of queries.

CUDA_VISIBLE_DEVICES=0 python3 pipe_testUnitModelsOutputGen_confounder.py         --execution_mode  testAllQueryGen         --img_type vit         --output_len 128         --full_FT YES         --user_msg rationale         --epoch 50         --lr 5e-5         --use_caption         --use_generate         --prompt_format QCM-E         --output_dir experiments         --final_eval

* 	Stage 2: Kindly use the following command to generate the set of queries.

CUDA_VISIBLE_DEVICES=0 python3 pipe_testUnitModelsOutputGen_confounder.py         --execution_mode  testAllQueryGen_1Q1A         --img_type vit         --output_len 85         --full_FT YES         --user_msg rationale         --epoch 50         --lr 5e-5         --use_caption         --use_generate         --prompt_format QCM-E         --output_dir experiments         --final_eval

* 	Now, run showFinalResult-B.py to generate (print) the formatted outputs. 

